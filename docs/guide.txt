
1. new/delete malloc、realloc/free
	为内存分配加壳
	1). 重载全局的new/delete. 如果保证安全？
	2). 记录分配的内存 list

2. 内存越界
	通过签名检测内存越界. 同时需要考虑内存对齐的情况

3. 对象计数
	实现一个计数的类

4. 录像
	记录数据在文件中以便重现

5. log
	实现一个log类
	


tips:
	用单件取代全局
	考虑线程安全
	小内存分配问题, 在分配限制内存大小之内的, 用自己的内存分配器

内存分配器规则:
	1. 必须返回正确的值(返回指针或者抛出异常)
	2. 内存不足时必须调用new-handing 函数
	3. 对零内存分配准备
	4. operator new应该内含一个无穷循环，如果他无法满足内存需求，就调用new-handing函数
	5. operator delete应该在收到NULL参数时不做任何事

内存分配过程：
	1. 当写出一个表达式 Wiget *p = new Wiget时, 共有两个函数被调用
		1. operator new    2 Wiget的构造函数。 
		假设第一个函数分配成功，第二个函数却抛出异常.
		那么第一个函数分配的内存必须取消并恢复.
		
		如果一个带额外参数的 operator new没有"带相同额外参数的operator delete"
		那么new的分配动作需要取消将不会有任何delete 函数被调用, 造成内存泄漏
		
		

一: 检测内存泄漏
	
	1. 设计思路：
		重载全局operator new/delete, 在内存分配时记录地址、文件信息到链表。
		在内存释放时从链表节点中删除, 定时打印链表查看未释放的内存
		

二: 检测内存越界
	
	1. 设计思路:
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

